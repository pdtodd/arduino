// NeoPixel Ring simple sketch (c) 2013 Shae Erisson
// released under the GPLv3 license to match the rest of the AdaFruit NeoPixel library
#include <Adafruit_NeoPixel.h>
 
// Which pin on the Arduino is connected to the NeoPixels?
#define PIN 6
 
// How many NeoPixels are attached to the Arduino?
#define NUMPIXELS 8
//local variables
int red = 0; int green = 0; int blue = 0; //RGB colors
int i = 0; // i is variable for the Neo-Pixel number
int j = 10;
int count = 0;
int dv = 250; // delay value
// When we setup the NeoPixel library, we tell it how many pixels, and which pin to use to send signals.
// Note that for older NeoPixel strips you might need to change the third parameter--see the strandtest
// example for more information on possible values.
Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);
 
 
 
void setup() {
pixels.begin(); // This initializes the NeoPixel library.
}
 
void loop() {
j = 9;
// For a set of NeoPixels the first NeoPixel is 0, second is 1, all the way up to the count of pixels minus one.
for (i = 7; i >= 0; i--){
red = 255; green = 255; blue = 0;
// pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
pixels.setPixelColor(i, pixels.Color(red,green,blue)); // Moderately bright green color.
pixels.show(); // This sends the updated pixel color to the hardware.
// pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
pixels.setPixelColor(i+1, pixels.Color(red,green,blue)); // Moderately bright green color.
pixels.show(); // This sends the updated pixel color to the hardware.
// pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
 
j = i;
//delay(dv);
red = 0; green = 0; blue = 0;
pixels.setPixelColor(j, pixels.Color(red,green,blue)); // Moderately bright green color.
pixels.show(); // This sends the updated pixel color to the hardware.
// pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
// pixels.setPixelColor(i+1, pixels.Color(red,green,blue)); // Moderately bright green color.
//pixels.show(); // This sends the updated pixel color to the hardware.
// pixels.Color takes RGB values, from 0,0,0 up to 255,255,255
 
delay(dv);
}
} 
